<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>淘小僧</title>
    <link>http://42.121.114.240/</link>
    <pubDate>2013-04-07 09:01:22 +0800</pubDate>
    <item>
      <title>关于如何使用appledoc生成XCode能读取的文档的完整版</title>
      <link>http://42.121.114.240//2013/04/create-docset-used-by-xcode-the-tool-appledoc[V1.0].html</link>
      <pubDate>2013-04-06 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;#关于生成文档的事项&lt;/p&gt;

&lt;p&gt;可以借助appledoc去生成文档，并且可以通过xcode自带的文档查看器去跳转查看。&lt;/p&gt;

&lt;p&gt;##安装步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装appledoc，简单的方法就是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;）下载源码 git clone git://github.com/tomaz/appledoc.git&lt;/li&gt;

&lt;li&gt;&lt;p&gt;）安装appledoc，并且安装到/usr/bin等目录下，以便直接appledoc直接运行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sh install-appledoc.sh -b /usr/bin -t ~/Library/Application\ Support/appledoc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##生成文档
通过下面的命令去生成文档
&lt;code&gt;
appledoc --project-name WXMessengerDoc --project-company &amp;quot;alibaba-inc&amp;quot; --company-id com.alibaba-inc.WXMessenger [--output ./helloworld]  [includeFilePathOrFile] [--ignore excludeFilePathOrFile] .
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令只扫描当前目录下所有文件（另外包含includeFilePathOrFile和去除excludeFilePathOrFile) 并生成到某个目录下(默认是当前目录）&lt;/p&gt;

&lt;p&gt;该命令结束后会添加到系统的文档目录下&lt;/p&gt;

&lt;p&gt;If the path is directory, it&amp;rsquo;s recursively parsed for all source files. If path is file, it&amp;rsquo;s parsed as source file&lt;/p&gt;

&lt;p&gt;#####更多关于命令的说明是这样的:
&lt;a href=&#34;http://gentlebytes.com/appledoc-docs-examples-basic/&#34;&gt;http://gentlebytes.com/appledoc-docs-examples-basic/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2：写代码的时候注意添加注释，我测试下生成的规则后对注释的理解。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;头文件中注释使用
/*
 我随便写的，反正这里不会被抽取作为文档的一部分，这里随便写点帮助别人如何使用该API的注释就好了，反正安装了docset后，你都可以直接option+左键点出文档相关了，这里说太多参数，函数作用，返回值的东西也没什么用，而且还占地方
 */
- (id)initWithAvatar:(UIImage *)avatarImage;


.m或者.mm文件里添加注释如果下，该部分会被appledoc提取生成文档
/** 你可以从这开始，不过也没什么必要，反正这里和下面那行一样的功能,这行不写可能更加好看点
 这里很特别，这里是添加Discussion的地方，这样我们可以看到这个函数有什么问题啊，注意事项啊，反正他放到了文档里的Discussion里，你自己看着办
 @brief 麻烦告诉我这个函数干什么用的
 @param avatarImage 介绍下avatarImage是什么东西吧。
 @return 这里是返回结果的描述，什么情况返回什么样的结果啊？
 @exception name description
 */
- (id)initWithAvatar:(UIImage *)avatarImage{
    。。。
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的方式是头文件和.m文件分开注释
但是对于protocol来说，没有实现文件了，所以还是需要直接添加注释的，这里测试的代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 这个协议的描述
 */
@protocol PHAvatarViewDelegate &amp;lt;NSObject&amp;gt;
@optional
/**
 @brief 这个didShowAvatar delegate的作用
 */
-(void)didShowAvatar:(NSString*)avatarName animated:(BOOL)animated;
@required
/**
 @brief willShowAvatar delegate的作用
 */
-(void)willShowAvatar:(NSString*)avatarName animated:(BOOL)animated;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的方式就能生成如下的效果了(protocol类似，这里不贴了），详细的注释和文档效果图见最下面&lt;/p&gt;

&lt;p&gt;##说明&lt;/p&gt;

&lt;p&gt;这里有几点说明下：（下面说的文档注释指会被提取出生成文档的，普通注释不会被提取)&lt;/p&gt;

&lt;p&gt;1:如果文档注释写到.m等文件里也是可行的，这样可以减少头文件的注释大小，头文件只添加一部分普通注释就好了。但是protocol之类的就不得不在声明处添加文档注释了。&lt;/p&gt;

&lt;p&gt;2：如果在.m .mm等文件里添加文档注释，那么生成的文档可能有个比较怪异，比如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Declared In
    PHAvatarView.m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以这个是写在.m文件里的弊端。&lt;/p&gt;

&lt;p&gt;3：要生成文档的添加注释的规则方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）多行注释是从下面这种样式/**注释*/注释里抓的，注意前面需要是/**（实际上/*!也支持），对于/*注释*/这样的注释是不会被提取的。单行注释通过///去抓取，//是不会抓取的
    /**
      注释
      */
2）简介需要标签@brief，而discussion一定要写在最前面。
3）对于同一个方法不能出现两个两个地方的文档注释，否则.h文件里的注释会覆盖了.m文件
4）扫描生成注释的时候可以忽略某些文件夹或者某些类型文件。
5）标签的格式一般为类似@param &amp;lt;name&amp;gt; &amp;lt;description&amp;gt;
6）可以通过///@name spcename去添加一段需要在文档中标示一组方法的作用，具体看下面的文档效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;集成安装到XCode中直接安装&lt;/h2&gt;

&lt;p&gt;还可以通过在xcode工程里添加一个target来运行该target生成文档
创建一个target，添加一个run script
内容类似下面
&lt;code&gt;
/usr/bin/appledoc \
--project-name &amp;quot;Messenger&amp;quot; \
--project-company &amp;quot;Gentle Bytes&amp;quot; \
--company-id com.alibaba-inc.WXMessenger \
--ignore UnitTest   \
.
exit 0
&lt;/code&gt;
说明：这里之前安装appledoc是安装到了/usr/bin下，运行该target后自动生成相关的文档并安装到系统文档目录（/Users/youUserName/Library/Developer/Shared/Documentation/DocSets）下。
####参见：
&lt;a href=&#34;http://www.infinite-loop.dk/wp/wp-content/uploads/2011/06/Build-Documentation-Script.png&#34;&gt;http://www.infinite-loop.dk/wp/wp-content/uploads/2011/06/Build-Documentation-Script.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#附：
##参考资料：
###更多参考
&lt;a href=&#34;http://gentlebytes.com/appledoc&#34;&gt;http://gentlebytes.com/appledoc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;github地址: &lt;a href=&#34;https://github.com/tomaz/appledoc&#34;&gt;https://github.com/tomaz/appledoc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.infinite-loop.dk/blog/2011/06/providing-custom-documentation-in-xcode/&#34;&gt;http://www.infinite-loop.dk/blog/2011/06/providing-custom-documentation-in-xcode/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是官方的appledoc源码和生成的文档，可以参考比对。
&lt;a href=&#34;https://github.com/tomaz/appledoc/blob/master/&#34;&gt;https://github.com/tomaz/appledoc/blob/master/&lt;/a&gt;
&lt;a href=&#34;http://gentlebytes.com/media/appledoc/examples/v2/latest/Classes/GBGenerator.html#tasks&#34;&gt;http://gentlebytes.com/media/appledoc/examples/v2/latest/Classes/GBGenerator.html#tasks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###附头文件和实现文件的注释和最后的文档效果：&lt;/p&gt;

&lt;p&gt;###&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-头文件&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** 
 这个类的作用
 */
@interface PHAvatarView : UIView
{
    
}

///-----------------------------------------------------------------
/// @name Initialization 
///-----------------------------------------------------------------


/*
 * 我随便写的，反正这里不会被抽取作为文档的一部分，这里随便写点帮助别人如何使用该API的注释就好了，反正安装了docset后，你都可以直接option+左键点出文档相关了，这里说太多参数，函数作用，返回值的东西也没什么用，而且还占地方
 *
 *
 */
//我随便写，这里不会被提取
- (id)initWithAvatar:(UIImage *)avatarImage;

@end

/**
 这个协议的描述
 */
@protocol PHAvatarViewDelegate &amp;lt;NSObject&amp;gt;
@optional
/**
 @brief 这个didShowAvatar delegate的作用
 */
-(void)didShowAvatar:(NSString*)avatarName animated:(BOOL)animated;
@required
/**
 @brief willShowAvatar delegate的作用
 */
-(void)willShowAvatar:(NSString*)avatarName animated:(BOOL)animated;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;    实现文件    &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation PHAvatarView

/** 你可以从这开始，不过也没什么必要，反正这里和下面那行一样的功能,这行不写可能更加好看点
 这里很特别，这里是添加Discussion的地方，这样我们可以看到这个函数有什么问题啊，注意事项啊，反正他放到了文档里的Discussion里，你自己看着办
 @brief 麻烦告诉我这个函数干什么用的
 @param avatarImage 介绍下avatarImage是什么东西吧
 @return 这里是返回结果的描述，什么情况返回什么样的结果啊？
 @exception aaa 异常提示
 */
- (id)initWithAvatar:(UIImage *)avatarImage{
    if (self = [super initWithFrame:CGRectMake(0, 0, 50, 50)]) {
        UIImageView *avatarImageView = [[[UIImageView alloc] initWithImage:avatarImage] autorelease];
        [avatarImageView sizeToFit];
        avatarImageView.layer.cornerRadius = avatarImage.size.width/2.0;
        avatarImageView.clipsToBounds = YES;
        avatarImageView.frame = CGRectMake(2, 0, avatarImageView.frame.size.width, avatarImageView.frame.size.height);
        [self addSubview:avatarImageView];

        UIImageView *maskView = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;invites-user-avatar-edge.png&amp;quot;]] autorelease];
        [maskView sizeToFit];
        [self addSubview:maskView];
    }
    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;     文档效果     &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
&lt;img src=&#34;http://yunpan.alibaba-inc.com/share/scan.do?info=8H2tK3INh&amp;pInfo=8H2tK3INh&amp;app_name=&#34;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>关于如何使用appledoc生成XCode能读取的文档的命令</title>
      <link>http://42.121.114.240//2013/04/create-docset-used-by-xcode-the-tool-appledoc.html</link>
      <pubDate>2013-04-06 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;messenger文档生成命令&lt;/p&gt;

&lt;p&gt;appledoc &amp;ndash;project-name WXMessengerDoc &amp;ndash;project-company &amp;ldquo;alibaba-inc&amp;rdquo; &amp;ndash;company-id com.alibaba-inc.WXMessenger &amp;ndash;output ./WXMessengerDoc &amp;ndash;ignore ./Three20 &amp;ndash;ignore ./ASIHttpRequest &amp;ndash;ignore ./script &amp;ndash;ignore ./tools &amp;ndash;ignore ./docs &amp;ndash;ignore ./Messenger/JSON &amp;ndash;ignore ./Messenger/JSONKit.h &amp;ndash;ignore ./Messenger/JSONKit.m &amp;ndash;ignore ./Messenger/PopverView &amp;ndash;ignore ./Messenger/RichText &amp;ndash;ignore /Messenger/SDWebData &amp;ndash;ignore ./Messenger/SFHFKeychainUtils &amp;ndash;ignore ./Messenger/TouchJSON &amp;ndash;ignore ./Messenger/weak_ref &amp;ndash;ignore ./Messenger/zh-Hans.lproj &amp;ndash;ignore ./Messenger/Frameworks .&lt;/p&gt;
</description>
    </item>
    <item>
      <title>如何在XCode中以不同的颜色分级显示不同级别的log信息</title>
      <link>http://42.121.114.240//2012/04/08/display-log-in-different-level-with-different-color.html</link>
      <pubDate>2012-04-08 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;转发：
原文出处：http://maxwin.me/blog/?p=124&lt;/p&gt;

&lt;h2&gt;安装：&lt;/h2&gt;

&lt;p&gt;XLog – Xcode log分级显示插件&lt;/p&gt;

&lt;p&gt;下载链接http://maxwin.me/blog/wp-content/uploads/&lt;sup&gt;2012&lt;/sup&gt;&amp;frasl;&lt;sub&gt;05&lt;/sub&gt;/XLog.zip
提供功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;支持log分级，Debug/Info/Warn/Error&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;支持自定义log颜色&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;安装可查看readme文件，其实就是./install.sh将插件XLog.bundle复制到~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/目录下&lt;/p&gt;

&lt;h2&gt;使用&lt;/h2&gt;

&lt;p&gt;引入工程中的XLogUtil.h和.m文件,也可看下列代码.
调用类似这样的代码XLog_v(@&amp;ldquo;start!&amp;rdquo;);即可。（仔细查看.h文件，里面还提供其他的分级方法，如XLog_i更多的自己查看）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//
//  XLog.h
//  TestMXLog
//
//  Created by WenDong Zhang on 5/9/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//
#import &amp;lt;Foundation/Foundation.h&amp;gt;

#define XLOG_ESC_CH @&amp;quot;\033&amp;quot;
#define XLOG_LEVEL_DEBUG    @&amp;quot;DEBUG&amp;quot;
#define XLOG_LEVEL_INFO     @&amp;quot;INFO&amp;quot;
#define XLOG_LEVEL_WARN     @&amp;quot;WARN&amp;quot;
#define XLOG_LEVEL_ERROR    @&amp;quot;ERROR&amp;quot;

// colors for log level, change it as your wish
#define XLOG_COLOR_RED   XLOG_ESC_CH @&amp;quot;#FF0000&amp;quot;
#define XLOG_COLOR_GREEN XLOG_ESC_CH @&amp;quot;#00FF00&amp;quot;
#define XLOG_COLOR_BROWN  XLOG_ESC_CH @&amp;quot;#FFFF00&amp;quot;
// hard code, use 00000m for reset flag
#define XLOG_COLOR_RESET XLOG_ESC_CH @&amp;quot;#00000m&amp;quot;   


#if defined (__cplusplus)
extern &amp;quot;C&amp;quot; {
#endif

    void _XLog_print(NSString *tag, NSString *colorStr, const char *fileName, const char *funcName, unsigned line, NSString *log);
    
    void _XLog_getFileName(const char *path, char *name);
    
    BOOL _XLog_isEnable();

#if defined (__cplusplus)
}
#endif

#define XLog_log(tag, color, ...) _XLog_print(tag, color, __FILE__, __FUNCTION__, __LINE__, [NSString stringWithFormat:__VA_ARGS__])
#define XLog_d(...) XLog_log(XLOG_LEVEL_DEBUG, XLOG_COLOR_GREEN, __VA_ARGS__)
#define XLog_i(...) XLog_log(XLOG_LEVEL_INFO, XLOG_COLOR_RESET, __VA_ARGS__)
#define XLog_v(...) XLog_log(XLOG_LEVEL_WARN, XLOG_COLOR_BROWN, __VA_ARGS__)
#define XLog_e(...) XLog_log(XLOG_LEVEL_ERROR, XLOG_COLOR_RED, __VA_ARGS__)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//
//  XLog.m
//  TestMXLog
//
//  Created by WenDong Zhang on 5/9/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import &amp;quot;XLogUtil.h&amp;quot;

//static int isXLogEnable = -1;   // -1: not set, 0: disable, 1: enable

void _XLog_print(NSString *tag, NSString *colorStr, const char *fileName, const char *funcName, unsigned line, NSString *log)
{
    const char *tagStr = [tag UTF8String];
    // show filename without path
    char *file = (char *)malloc(sizeof(char) * strlen(fileName));
    _XLog_getFileName(fileName, file);
    
    if (_XLog_isEnable()) {
        printf(&amp;quot;%s&amp;quot;, [colorStr UTF8String]);    // log color
        printf(&amp;quot;%s[%s]&amp;quot;, [XLOG_ESC_CH UTF8String], tagStr); // start tag
    }
    
    printf(&amp;quot;%s &amp;quot;, [[[NSDate date] description] UTF8String]);   // time
    printf(&amp;quot;%s %s:l%u) &amp;quot;, file, funcName, line);    // fileName
    printf(&amp;quot;%s&amp;quot;, [log UTF8String]);    // log 
    
    if (_XLog_isEnable()) {
        printf(&amp;quot;%s[/%s]&amp;quot;, [XLOG_ESC_CH UTF8String], tagStr);    // end tag
        printf(&amp;quot;%s&amp;quot;, [XLOG_COLOR_RESET UTF8String]);    // reset color
    }
    printf(&amp;quot;\n&amp;quot;);
    
    free(file);
}

BOOL _XLog_isEnable()
{
    return YES;
//    if (isXLogEnable == -1) {   // init
//        char *xlogEnv = getenv(&amp;quot;XLOG_FLAG&amp;quot;);
//        if (xlogEnv &amp;amp;&amp;amp; !strcmp(xlogEnv, &amp;quot;YES&amp;quot;)) {
//            isXLogEnable = 1;
//        } else {
//            isXLogEnable = 0;
//        }
//    }
//
//    if (isXLogEnable == 0) {
//        return NO;
//    }
//    return YES;
}

void _XLog_getFileName(const char *path, char *name)
{
    int l = strlen(path);
    while (l-- &amp;gt;= 0 &amp;amp;&amp;amp; path[l] != &#39;/&#39;) {}
    strcpy(name, path + (l &amp;gt;= 0 ? l + 1 : 0));
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>你的第一篇博客</title>
      <link>http://42.121.114.240//2013/first-page.html</link>
      <pubDate>2012-04-05 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;

&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任何删掉,修改这个文件&lt;/h2&gt;

&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;
&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;
&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;
&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;

&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gor post 文章标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gor compile #编译
gor http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;

&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;

&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;

&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;申请github帐户&lt;/li&gt;
&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;
&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;
&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git
git add -A
git commit -m &amp;quot;...&amp;quot;
git pull
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;

&lt;h1&gt;祝你使用愉快&lt;/h1&gt;
</description>
    </item>
  </channel>
</rss>